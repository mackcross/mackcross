{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2
    ],
    "data": [
        "                             breaks = c(19.66250, 21.33818, 21.68000, 22.08706, 23.12000),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$binned_math)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "math_map <- tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_math\",",
        "+ ",
        "             col = \"#034e7b\",",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Math Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 21.3\",\"<= 21.7\",\"<= 22.1\",\"<= 23.1\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "# Combine the two maps into one plot",
        "> ",
        "animated_map <- plot_grid(sci_map, math_map, ncol = 2)",
        "> ",
        "",
        "> ",
        "# Animate the plot by transitioning between the two maps",
        "> ",
        "animated_map <- animated_map +",
        "+ ",
        "  transition_states(states = c(\"sci_map\", \"math_map\"), transition_length = 1, state_length = 1)",
        "> ",
        "",
        "> ",
        "animate(animated_map)",
        "Error in order(ind) : argument 1 is not a vector\n",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_sci, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$cleaned_rural_mean_sci)",
        "> ",
        "my_map$binned_science <- cut(my_map$cleaned_rural_mean_sci,",
        "+ ",
        "                             breaks = c(19.01000, 20.13391, 20.64000, 21.16250, 22.63571),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$binned_science)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_science\",",
        "+ ",
        "             col = \"#034e7b\", ",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Science Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 20.1\",\"<= 20.6\",\"<= 21.2\",\"<= 22.6\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "###############################################################################",
        "> ",
        "",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_math, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$cleaned_rural_mean_math)",
        "> ",
        "my_map$binned_math <- cut(my_map$cleaned_rural_mean_math,",
        "+ ",
        "                             breaks = c(19.66250, 21.33818, 21.68000, 22.08706, 23.12000),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$binned_math)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_math\",",
        "+ ",
        "             col = \"#034e7b\",",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Math Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 21.3\",\"<= 21.7\",\"<= 22.1\",\"<= 23.1\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "# Combine the two maps into one plot",
        "> ",
        "animated_map <- plot_grid(sci_map, math_map, ncol = 2)",
        "> ",
        "",
        "> ",
        "# Animate the plot by transitioning between the two maps",
        "> ",
        "#animated_map <- animated_map +",
        "> ",
        "#  transition_states(states = c(\"sci_map\", \"math_map\"), transition_length = 1, #state_length = 1)",
        "> ",
        "",
        "> ",
        "# animate(animated_map)",
        "> ",
        "knitr::opts_chunk$set(echo = FALSE, message = FALSE)",
        "> ",
        "options(message = FALSE)",
        "> ",
        "rm(list=ls())",
        "> ",
        "library(readr)",
        "> ",
        "packageStartupMessage(library(choroplethr))",
        "> ",
        "packageStartupMessage(library(choroplethrMaps))",
        "> ",
        "library(dplyr)",
        "> ",
        "packageStartupMessage(library(tmap))",
        "> ",
        "packageStartupMessage(library(tmaptools))",
        "> ",
        "",
        "> ",
        "packageStartupMessage(library(sf))",
        "> ",
        "packageStartupMessage(library(ggplot2))",
        "> ",
        "packageStartupMessage(library(plotly))",
        "> ",
        "",
        "> ",
        "my_map <- st_read(\"~/Documents/research/primate_map/project_materials/sci_comm/shapefiles/rural_variables.geojson\")",
        "Reading layer `rural_variables' from data source \n  `/Users/mackenzieleandracross/Documents/research/primate_map/project_materials/sci_comm/shapefiles/rural_variables.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 99 features and 32 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -96.63944 ymin: 40.37566 xmax: -90.1401 ymax: 43.50109\nGeodetic CRS:  WGS 84\n",
        "> ",
        "",
        "> ",
        "my_map$cleaned_rural_High.school.graduate..includes.equivalency... <- as.numeric(my_map$cleaned_rural_High.school.graduate..includes.equivalency...)",
        "> ",
        "my_map$cleaned_rural_Bachelor.s.degree.. <- as.numeric(my_map$cleaned_rural_Bachelor.s.degree..)",
        "> ",
        "my_map$cleaned_rural_Graduate.or.professional.degree.. <- as.numeric(my_map$cleaned_rural_Graduate.or.professional.degree..)",
        "> ",
        "",
        "> ",
        "my_plot <- ggplot() +",
        "+ ",
        "  geom_sf(data = my_map, aes(fill = cleaned_rural_High.school.graduate..includes.equivalency...)) +",
        "+ ",
        "  scale_fill_gradientn(colours = c(\"#f7fcf0\", \"#084081\"), ",
        "+ ",
        "                       #breaks = quantile(my_map2$cleaned_grouped_data_import_ratio, probs = seq(0, 1, 0.25)), ",
        "+ ",
        "                       na.value = \"black\", ",
        "+ ",
        "                       guide = \"legend\") +",
        "+ ",
        "  theme_void()",
        "> ",
        "",
        "> ",
        "# Add hover information using plotly",
        "> ",
        "ggplotly(my_plot, tooltip = c(\"cleaned_rural_High.school.graduate..includes.equivalency...\"))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "my_plot2 <- ggplot() +",
        "+ ",
        "  geom_sf(data = my_map, aes(fill = cleaned_rural_Bachelor.s.degree..)) +",
        "+ ",
        "  scale_fill_gradientn(colours = c(\"#f7fcf0\", \"#084081\"), ",
        "+ ",
        "                       #breaks = quantile(my_map2$cleaned_grouped_data_import_ratio, probs = seq(0, 1, 0.25)), ",
        "+ ",
        "                       na.value = \"black\", ",
        "+ ",
        "                       guide = \"legend\") +",
        "+ ",
        "  theme_void()",
        "> ",
        "",
        "> ",
        "# Add hover information using plotly",
        "> ",
        "ggplotly(my_plot2, tooltip = c(\"cleaned_rural_Bachelor.s.degree..\"))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "my_plot2 <- ggplot() +",
        "+ ",
        "  geom_sf(data = my_map, aes(fill = cleaned_rural_Graduate.or.professional.degree..)) +",
        "+ ",
        "  scale_fill_gradientn(colours = c(\"#f7fcf0\", \"#084081\"), ",
        "+ ",
        "                       #breaks = quantile(my_map2$cleaned_grouped_data_import_ratio, probs = seq(0, 1, 0.25)), ",
        "+ ",
        "                       na.value = \"black\", ",
        "+ ",
        "                       guide = \"legend\") +",
        "+ ",
        "  theme_void()",
        "> ",
        "",
        "> ",
        "# Add hover information using plotly",
        "> ",
        "ggplotly(my_plot2, tooltip = c(\"cleaned_rural_Graduate.or.professional.degree..\"))",
        "> ",
        "",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_sci, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$cleaned_rural_mean_sci)",
        "> ",
        "my_map$binned_science <- cut(my_map$cleaned_rural_mean_sci,",
        "+ ",
        "                             breaks = c(19.01000, 20.13391, 20.64000, 21.16250, 22.63571),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "Error in cut.default(my_map$cleaned_rural_mean_sci, breaks = c(19.01,  : \n  'x' must be numeric\n",
        "> ",
        "knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)",
        "> ",
        "rm(list=ls())",
        "> ",
        "library(readr)",
        "> ",
        "library(choroplethr)",
        "> ",
        "library(choroplethrMaps)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2) ",
        "> ",
        "library(plotly)",
        "> ",
        "library(tmap)",
        "> ",
        "library(sf)",
        "> ",
        "library(tmaptools)",
        "> ",
        "library(gganimate)",
        "> ",
        "library(cowplot)",
        "> ",
        "# Importing in geojoson file ",
        "> ",
        "my_map <- st_read(\"~/Documents/research/primate_map/project_materials/sci_comm/shapefiles/rural_variables.geojson\")",
        "Reading layer `rural_variables' from data source \n  `/Users/mackenzieleandracross/Documents/research/primate_map/project_materials/sci_comm/shapefiles/rural_variables.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 99 features and 32 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -96.63944 ymin: 40.37566 xmax: -90.1401 ymax: 43.50109\nGeodetic CRS:  WGS 84\n",
        "> ",
        "my_data <- data.frame(my_map)",
        "> ",
        "",
        "> ",
        "# Convert size variable to numeric and remove missing values",
        "> ",
        "my_map$cleaned_rural_density <- as.numeric(my_map$cleaned_rural_density)",
        "> ",
        "my_map$cleaned_rural_mean_sci <- as.numeric(my_map$cleaned_rural_mean_sci)",
        "> ",
        "my_map$cleaned_rural_mean_math <- as.numeric(my_map$cleaned_rural_mean_math)",
        "> ",
        "my_map$cleaned_rural_CountyGraduateRate4yr <- as.numeric(my_map$cleaned_rural_CountyGraduateRate4yr)",
        "> ",
        "my_map$cleaned_rural_CountySpendingPerStudent <- as.numeric(my_map$cleaned_rural_CountySpendingPerStudent)",
        "> ",
        "my_map$cleaned_rural_Graduate.or.professional.degree.. <- as.numeric(my_map$cleaned_rural_Graduate.or.professional.degree..)",
        "> ",
        "my_map$cleaned_rural_Bachelor.s.degree.. <- as.numeric(my_map$cleaned_rural_Bachelor.s.degree..)",
        "> ",
        "",
        "> ",
        "# Palettes of interest ",
        "> ",
        "# palette = c(\"#a6bddb\", \"#3690c0\", \"#034e7b\"), ",
        "> ",
        "# palette = c(\"#8c510a\", \"#d8b365\", \"#7fbf7b\"),",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_sci, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$cleaned_rural_mean_sci)",
        "> ",
        "my_map$binned_science <- cut(my_map$cleaned_rural_mean_sci,",
        "+ ",
        "                             breaks = c(19.01000, 20.13391, 20.64000, 21.16250, 22.63571),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$binned_science)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_science\",",
        "+ ",
        "             col = \"#034e7b\", ",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Science Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 20.1\",\"<= 20.6\",\"<= 21.2\",\"<= 22.6\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "###############################################################################",
        "> ",
        "",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_math, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$cleaned_rural_mean_math)",
        "> ",
        "my_map$binned_math <- cut(my_map$cleaned_rural_mean_math,",
        "+ ",
        "                             breaks = c(19.66250, 21.33818, 21.68000, 22.08706, 23.12000),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$binned_math)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_math\",",
        "+ ",
        "             col = \"#034e7b\",",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Math Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 21.3\",\"<= 21.7\",\"<= 22.1\",\"<= 23.1\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "# Combine the two maps into one plot",
        "> ",
        "# animated_map <- plot_grid(sci_map, math_map, ncol = 2)",
        "> ",
        "",
        "> ",
        "# Animate the plot by transitioning between the two maps",
        "> ",
        "#animated_map <- animated_map +",
        "> ",
        "#  transition_states(states = c(\"sci_map\", \"math_map\"), transition_length = 1, #state_length = 1)",
        "> ",
        "",
        "> ",
        "# animate(animated_map)",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_sci, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$cleaned_rural_mean_sci)",
        "> ",
        "my_map$binned_science <- cut(my_map$cleaned_rural_mean_sci,",
        "+ ",
        "                             breaks = c(19.01000, 20.13391, 20.64000, 21.16250, 22.63571),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$binned_science)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sci_map <- tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_science\",",
        "+ ",
        "             col = \"#034e7b\", ",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Science Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 20.1\",\"<= 20.6\",\"<= 21.2\",\"<= 22.6\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "###############################################################################",
        "> ",
        "",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_math, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$cleaned_rural_mean_math)",
        "> ",
        "my_map$binned_math <- cut(my_map$cleaned_rural_mean_math,",
        "+ ",
        "                             breaks = c(19.66250, 21.33818, 21.68000, 22.08706, 23.12000),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$binned_math)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "math_map <- tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_math\",",
        "+ ",
        "             col = \"#034e7b\",",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Math Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 21.3\",\"<= 21.7\",\"<= 22.1\",\"<= 23.1\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "# Combine the two maps into one plot",
        "> ",
        "animated_map <- plot_grid(sci_map, math_map, ncol = 2)",
        "> ",
        "",
        "> ",
        "# Animate the plot by transitioning between the two maps",
        "> ",
        "animated_map <- animated_map +",
        "+ ",
        "  transition_states(states = c(\"sci_map\", \"math_map\"), transition_length = 1, #state_length = 1)",
        "+ ",
        "",
        "+ ",
        "animate(animated_map)",
        "Error: Incomplete expression: animated_map <- animated_map +\n  transition_states(states = c(\"sci_map\", \"math_map\"), transition_length = 1, #state_length = 1)\n\nanimate(animated_map)\n",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_sci, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$cleaned_rural_mean_sci)",
        "> ",
        "my_map$binned_science <- cut(my_map$cleaned_rural_mean_sci,",
        "+ ",
        "                             breaks = c(19.01000, 20.13391, 20.64000, 21.16250, 22.63571),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$binned_science)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sci_map <- tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_science\",",
        "+ ",
        "             col = \"#034e7b\", ",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Science Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 20.1\",\"<= 20.6\",\"<= 21.2\",\"<= 22.6\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "###############################################################################",
        "> ",
        "",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_math, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$cleaned_rural_mean_math)",
        "> ",
        "my_map$binned_math <- cut(my_map$cleaned_rural_mean_math,",
        "+ ",
        "                             breaks = c(19.66250, 21.33818, 21.68000, 22.08706, 23.12000),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$binned_math)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "math_map <- tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_math\",",
        "+ ",
        "             col = \"#034e7b\",",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Math Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 21.3\",\"<= 21.7\",\"<= 22.1\",\"<= 23.1\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "# Combine the two maps into one plot",
        "> ",
        "animated_map <- plot_grid(sci_map, math_map, ncol = 2)",
        "> ",
        "",
        "> ",
        "# Animate the plot by transitioning between the two maps",
        "> ",
        "animated_map <- animated_map +",
        "+ ",
        "  transition_states(states = c(\"sci_map\", \"math_map\"), transition_length = 1, state_length = 1)",
        "> ",
        "",
        "> ",
        "animate(animated_map)",
        "Error in order(ind) : argument 1 is not a vector\n",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_sci, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$cleaned_rural_mean_sci)",
        "> ",
        "my_map$binned_science <- cut(my_map$cleaned_rural_mean_sci,",
        "+ ",
        "                             breaks = c(19.01000, 20.13391, 20.64000, 21.16250, 22.63571),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$binned_science)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sci_map <- tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_science\",",
        "+ ",
        "             col = \"#034e7b\", ",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Science Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 20.1\",\"<= 20.6\",\"<= 21.2\",\"<= 22.6\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "###############################################################################",
        "> ",
        "",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_math, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$cleaned_rural_mean_math)",
        "> ",
        "my_map$binned_math <- cut(my_map$cleaned_rural_mean_math,",
        "+ ",
        "                             breaks = c(19.66250, 21.33818, 21.68000, 22.08706, 23.12000),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$binned_math)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "math_map <- tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_math\",",
        "+ ",
        "             col = \"#034e7b\",",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Math Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 21.3\",\"<= 21.7\",\"<= 22.1\",\"<= 23.1\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "# Combine the maps into a list",
        "> ",
        "maps <- list(sci_map, math_map)",
        "> ",
        "",
        "> ",
        "# Use gganimate to animate between the maps",
        "> ",
        "animated_map <- gganimate::transition_manual(",
        "+ ",
        "  states = maps,",
        "+ ",
        "  transition_length = 1,",
        "+ ",
        "  keep_last_state = TRUE",
        "+ ",
        ")",
        "Error: frames must be provided\n",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_sci, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$cleaned_rural_mean_sci)",
        "> ",
        "my_map$binned_science <- cut(my_map$cleaned_rural_mean_sci,",
        "+ ",
        "                             breaks = c(19.01000, 20.13391, 20.64000, 21.16250, 22.63571),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_science <- as.numeric(my_map$binned_science)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sci_map <- tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_science\",",
        "+ ",
        "             col = \"#034e7b\", ",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Science Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 20.1\",\"<= 20.6\",\"<= 21.2\",\"<= 22.6\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "###############################################################################",
        "> ",
        "",
        "> ",
        "# Determine quantiles ",
        "> ",
        "# quantile(my_map$cleaned_rural_mean_math, na.rm = TRUE)",
        "> ",
        "",
        "> ",
        "# Set quantiles ",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$cleaned_rural_mean_math)",
        "> ",
        "my_map$binned_math <- cut(my_map$cleaned_rural_mean_math,",
        "+ ",
        "                             breaks = c(19.66250, 21.33818, 21.68000, 22.08706, 23.12000),",
        "+ ",
        "                             labels = c(1, 2, 3, 4))",
        "> ",
        "my_map$binned_math <- as.numeric(my_map$binned_math)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "math_map <- tm_shape(my_map) +",
        "+ ",
        "  tm_fill(\"cleaned_rural_CountySpendingPerStudent\", style = \"quantile\", n = 5, palette = \"Greys\", title = \"Avg. Spending per Student\") +",
        "+ ",
        "  tm_bubbles(size = \"binned_math\",",
        "+ ",
        "             col = \"#034e7b\",",
        "+ ",
        "             alpha = .8, ",
        "+ ",
        "             title.size =\"Avg. ACT Math Score\", ",
        "+ ",
        "             legend.size.is.portrait=TRUE,",
        "+ ",
        "             sizes.legend.labels=c(\"<= 21.3\",\"<= 21.7\",\"<= 22.1\",\"<= 23.1\"), ",
        "+ ",
        "             scale = 1.75) +",
        "+ ",
        "  #tm_layout(frame = FALSE, bg.color = \"black\") +",
        "+ ",
        "  tm_legend(outside = TRUE, ",
        "+ ",
        "            outside.position = \"left\", ",
        "+ ",
        "            bg.color = \"transparent\", ",
        "+ ",
        "            frame = FALSE)",
        "> ",
        "",
        "> ",
        "# Combine the maps into a list",
        "> ",
        "maps <- list(sci_map, math_map)",
        "> ",
        "",
        "> ",
        "# Use gganimate to animate between the maps",
        "> ",
        "animated_map <- gganimate::transition_manual(",
        "+ ",
        "  states = maps,",
        "+ ",
        "  transition_length = 1,",
        "+ ",
        "  keep_last_state = TRUE",
        "+ ",
        ")",
        "Error: frames must be provided\n",
        "\nRestarting R session...\n\n"
    ]
}